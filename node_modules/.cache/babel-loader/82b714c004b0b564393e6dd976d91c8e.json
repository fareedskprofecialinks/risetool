{"ast":null,"code":"import { dispatch } from \"d3-dispatch\";\nimport { map } from \"d3-collection\";\nimport { timer } from \"d3-timer\";\nexport function x(d) {\n  return d.x;\n}\nexport function y(d) {\n  return d.y;\n}\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\nexport default function (_nodes) {\n  var simulation,\n      _alpha = 1,\n      _alphaMin = 0.001,\n      _alphaDecay = 1 - Math.pow(_alphaMin, 1 / 300),\n      _alphaTarget = 0,\n      _velocityDecay = 0.6,\n      forces = map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\");\n\n  if (_nodes == null) _nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n\n    if (_alpha < _alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i,\n        n = _nodes.length,\n        node;\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      _alpha += (_alphaTarget - _alpha) * _alphaDecay;\n      forces.each(function (force) {\n        force(_alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = _nodes[i];\n        if (node.fx == null) node.x += node.vx *= _velocityDecay;else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= _velocityDecay;else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = _nodes.length, node; i < n; ++i) {\n      node = _nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i),\n            angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(_nodes);\n    return force;\n  }\n\n  initializeNodes();\n  return simulation = {\n    tick: tick,\n    restart: function restart() {\n      return stepper.restart(step), simulation;\n    },\n    stop: function stop() {\n      return stepper.stop(), simulation;\n    },\n    nodes: function nodes(_) {\n      return arguments.length ? (_nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : _nodes;\n    },\n    alpha: function alpha(_) {\n      return arguments.length ? (_alpha = +_, simulation) : _alpha;\n    },\n    alphaMin: function alphaMin(_) {\n      return arguments.length ? (_alphaMin = +_, simulation) : _alphaMin;\n    },\n    alphaDecay: function alphaDecay(_) {\n      return arguments.length ? (_alphaDecay = +_, simulation) : +_alphaDecay;\n    },\n    alphaTarget: function alphaTarget(_) {\n      return arguments.length ? (_alphaTarget = +_, simulation) : _alphaTarget;\n    },\n    velocityDecay: function velocityDecay(_) {\n      return arguments.length ? (_velocityDecay = 1 - _, simulation) : 1 - _velocityDecay;\n    },\n    force: function force(name, _) {\n      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n    },\n    find: function find(x, y, radius) {\n      var i = 0,\n          n = _nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n      if (radius == null) radius = Infinity;else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = _nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n    on: function on(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}","map":{"version":3,"names":["dispatch","map","timer","x","d","y","initialRadius","initialAngle","Math","PI","sqrt","nodes","simulation","alpha","alphaMin","alphaDecay","pow","alphaTarget","velocityDecay","forces","stepper","step","event","tick","call","stop","iterations","i","n","length","node","undefined","k","each","force","fx","vx","fy","vy","initializeNodes","index","isNaN","radius","angle","cos","sin","initializeForce","initialize","restart","_","arguments","name","remove","set","get","find","dx","dy","d2","closest","Infinity","on"],"sources":["D:/xamp/htdocs/RiseSchool/Archive/node_modules/d3-force/src/simulation.js"],"sourcesContent":["import {dispatch} from \"d3-dispatch\";\nimport {map} from \"d3-collection\";\nimport {timer} from \"d3-timer\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\");\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function (force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}