{"ast":null,"code":"import e, { Component as t } from \"react\";\nimport n from \"prop-types\";\n\nfunction r(e, t) {\n  for (var n = 0; n < t.length; n++) {\n    var r = t[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n  }\n}\n\nfunction a(e, t, n) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\n\nfunction o(e) {\n  return (o = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n    return e.__proto__ || Object.getPrototypeOf(e);\n  })(e);\n}\n\nfunction i(e, t) {\n  return (i = Object.setPrototypeOf || function (e, t) {\n    return e.__proto__ = t, e;\n  })(e, t);\n}\n\nfunction c(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\n\nvar s = \"style_captchaContainer__LdFYB\",\n    l = \"style_retryButton__2gxEO\";\n!function (e, t) {\n  void 0 === t && (t = {});\n  var n = t.insertAt;\n\n  if (e && \"undefined\" != typeof document) {\n    var r = document.head || document.getElementsByTagName(\"head\")[0],\n        a = document.createElement(\"style\");\n    a.type = \"text/css\", \"top\" === n && r.firstChild ? r.insertBefore(a, r.firstChild) : r.appendChild(a), a.styleSheet ? a.styleSheet.cssText = e : a.appendChild(document.createTextNode(e));\n  }\n}(\".style_captchaContainer__LdFYB {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.style_retryButton__2gxEO {\\n  border: none;\\n  margin: 0 0 0 16px;\\n  padding: 0;\\n  width: auto;\\n  overflow: visible;\\n  background: transparent;\\n  color: inherit;\\n  font: inherit;\\n  line-height: normal;\\n  -webkit-font-smoothing: inherit;\\n  -moz-osx-font-smoothing: inherit;\\n  -webkit-appearance: none;\\n  outline: none;\\n  text-align: inherit;\\n}\\n\", {\n  insertAt: \"top\"\n});\n\nvar u = function (n) {\n  function s(t) {\n    var n, r, i;\n    return function (e, t) {\n      if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n    }(this, s), r = this, i = o(s).call(this, t), n = !i || \"object\" != typeof i && \"function\" != typeof i ? c(r) : i, a(c(n), \"generateCode\", function () {\n      for (var e = n.props, t = e.chars, r = e.charsCount, a = [], o = 0; o < r; o += 1) {\n        var i = Math.ceil(Math.random() * t.length);\n        t[i] && -1 === a.indexOf(t[i]) ? a.push(t[i]) : o -= 1;\n      }\n\n      return a.join(\"\");\n    }), a(c(n), \"resetCaptcha\", function (e) {\n      e.preventDefault(), n.generateCaptcha();\n    }), a(c(n), \"generateCaptcha\", function () {\n      var e = n.props,\n          t = e.width,\n          r = e.height,\n          a = e.fontSize,\n          o = e.captchaCode,\n          i = e.backgroundColor,\n          c = e.fontFamily,\n          s = e.fontColor;\n      n.captchaCode = n.generateCode();\n      var l = n.canvasRef.current.getContext(\"2d\");\n      l.fillStyle = i, l.fillRect(0, 0, t, r), l.font = \"\".concat(a, \"px \").concat(c), l.textAlign = \"center\", l.textBaseline = \"middle\", l.fillStyle = s, l.fillText(n.captchaCode.split(\"\").join(\" \"), t / 2, r / 2), o(n.captchaCode);\n    }), n.canvasRef = e.createRef(), n.captchaCode = \"\", n;\n  }\n\n  var l, u, h;\n  return function (e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && i(e, t);\n  }(s, t), l = s, (u = [{\n    key: \"componentDidMount\",\n    value: function value() {\n      this.generateCaptcha();\n    }\n  }, {\n    key: \"render\",\n    value: function value() {\n      var t = this.props,\n          n = t.width,\n          r = t.height,\n          a = t.retryIcon,\n          o = t.containerClassName,\n          i = t.captchaClassName,\n          c = t.retryButtonClassName,\n          s = t.retryImgClassName,\n          l = t.retry,\n          u = t.retryIconSize;\n      return e.createElement(\"div\", {\n        className: o\n      }, e.createElement(\"canvas\", {\n        width: n,\n        height: r,\n        ref: this.canvasRef,\n        style: {\n          pointerEvents: \"none\"\n        },\n        className: i\n      }), l && e.createElement(\"button\", {\n        onClick: this.resetCaptcha,\n        id: \"retryButton\",\n        className: c\n      }, e.createElement(\"img\", {\n        src: a,\n        alt: \"Re-new captcha\",\n        className: s,\n        width: u,\n        height: u\n      })));\n    }\n  }]) && r(l.prototype, u), h && r(l, h), s;\n}();\n\nu.defaultProps = {\n  width: 100,\n  height: 40,\n  fontSize: 22,\n  fontFamily: \"Arial, Tahoma\",\n  fontColor: \"#000\",\n  chars: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  charsCount: 4,\n  backgroundColor: \"#F2F2F2\",\n  retry: !0,\n  retryIcon: \"https://cdn.jsdelivr.net/npm/react-client-captcha/dist/retry.svg\",\n  retryIconSize: 24,\n  retryButtonClassName: l,\n  retryImgClassName: \"\",\n  containerClassName: s,\n  captchaClassName: \"\"\n}, u.propTypes = {\n  width: n.number.isRequired,\n  height: n.number.isRequired,\n  fontSize: n.number,\n  fontFamily: n.string,\n  fontColor: n.string,\n  chars: n.string,\n  charsCount: n.number,\n  captchaCode: n.func.isRequired,\n  backgroundColor: n.string,\n  retry: n.bool,\n  retryIcon: n.string,\n  retryIconSize: n.number,\n  retryButtonClassName: n.string,\n  retryImgClassName: n.string,\n  containerClassName: n.string,\n  captchaClassName: n.string\n};\nexport default u;","map":{"version":3,"sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","ClientCaptcha","Component","props","canvasRef","React","createRef","captchaCode","generateCaptcha","chars","charsCount","_this","captcha","i","index","Math","ceil","random","length","indexOf","push","join","e","preventDefault","width","height","fontSize","backgroundColor","fontFamily","fontColor","generateCode","ctx","current","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","split","retryIcon","containerClassName","captchaClassName","retryButtonClassName","retryImgClassName","retry","retryIconSize","this","className","pointerEvents","onClick","resetCaptcha","id","src","alt","defaultProps","cssClasses","propTypes","PropTypes","number","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cssClasses from \"./style.css\";\n\nclass ClientCaptcha extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.captchaCode = \"\";\n  }\n\n  componentDidMount() {\n    this.generateCaptcha();\n  }\n\n  generateCode = () => {\n    const { chars, charsCount } = this.props;\n    const captcha = [];\n    for (let i = 0; i < charsCount; i += 1) {\n      const index = Math.ceil(Math.random() * chars.length);\n      if (chars[index] && captcha.indexOf(chars[index]) === -1)\n        captcha.push(chars[index]);\n      else i -= 1;\n    }\n    return captcha.join(\"\");\n  };\n\n  resetCaptcha = e => {\n    e.preventDefault();\n    this.generateCaptcha();\n  }\n\n  generateCaptcha = () => {\n    const {\n      width,\n      height,\n      fontSize,\n      captchaCode,\n      backgroundColor,\n      fontFamily,\n      fontColor\n    } = this.props;\n    this.captchaCode = this.generateCode();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n    ctx.font = `${fontSize}px ${fontFamily}`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = fontColor;\n    ctx.fillText(this.captchaCode.split(\"\").join(\" \"), width / 2, height / 2);\n    captchaCode(this.captchaCode);\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      retryIcon,\n      containerClassName,\n      captchaClassName,\n      retryButtonClassName,\n      retryImgClassName,\n      retry,\n      retryIconSize\n    } = this.props;\n    return (\n      <div className={containerClassName}>\n        <canvas\n          width={width}\n          height={height}\n          ref={this.canvasRef}\n          style={{ pointerEvents: \"none\" }}\n          className={captchaClassName}\n        />\n        {retry && (\n          <button\n            onClick={this.resetCaptcha}\n            id=\"retryButton\"\n            className={retryButtonClassName}\n          >\n            <img\n              src={retryIcon}\n              alt=\"Re-new captcha\"\n              className={retryImgClassName}\n              width={retryIconSize}\n              height={retryIconSize}\n            />\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nClientCaptcha.defaultProps = {\n  width: 100,\n  height: 40,\n  fontSize: 22,\n  fontFamily: \"Arial, Tahoma\",\n  fontColor: \"#000\",\n  chars: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  charsCount: 4,\n  backgroundColor: \"#F2F2F2\",\n  retry: true,\n  retryIcon: \"https://cdn.jsdelivr.net/npm/react-client-captcha/dist/retry.svg\",\n  retryIconSize: 24,\n  retryButtonClassName: cssClasses.retryButton,\n  retryImgClassName: \"\",\n  containerClassName: cssClasses.captchaContainer,\n  captchaClassName: \"\"\n};\n\nClientCaptcha.propTypes = {\n  /**\n   * width of captcha image.\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * height of captcha image.\n   */\n  height: PropTypes.number.isRequired,\n  /**\n   * fontSize of captcha characters.\n   */\n  fontSize: PropTypes.number,\n  /**\n   * fontFamily of captcha characters.\n   */\n  fontFamily: PropTypes.string,\n  /**\n   * fontColor of captcha characters.\n   */\n  fontColor: PropTypes.string,\n  /**\n   * characters that captcha should be made with.\n   */\n  chars: PropTypes.string,\n  /**\n   * count of characters that captcha should be made with.\n   */\n  charsCount: PropTypes.number,\n  /**\n   * function that returns current shown captcha code.\n   */\n  captchaCode: PropTypes.func.isRequired,\n  /**\n   * backgroundColor of captcha image.\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * whether captcha has retry functionality\n   */\n  retry: PropTypes.bool,\n  /**\n   * the icon of retry button\n   */\n  retryIcon: PropTypes.string,\n  /**\n   * size of retry button icon\n   */\n  retryIconSize: PropTypes.number,\n  /**\n   * className of retry button\n   */\n  retryButtonClassName: PropTypes.string,\n  /**\n   * className of retry img\n   */\n  retryImgClassName: PropTypes.string,\n  /**\n   * className of captcha and retry button container div\n   */\n  containerClassName: PropTypes.string,\n  /**\n   * className of captcha image\n   */\n  captchaClassName: PropTypes.string\n};\n\nexport default ClientCaptcha;\n"]},"metadata":{},"sourceType":"module"}