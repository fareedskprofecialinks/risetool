"use strict";

var _TestUtil = _interopRequireDefault(require("../../Util/TestUtil"));

var _ToggleButton = _interopRequireDefault(require("./ToggleButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('<ToggleButton />', function () {
  it('is defined', function () {
    expect(_ToggleButton["default"]).not.toBeUndefined();
  });
  it('can be rendered', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"]);

    expect(wrapper).not.toBeUndefined();
  });
  it('isn\'t pressed by default', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"]);

    var pressedClass = wrapper.instance().pressedClass;
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(0);
  });
  it('sets the pressed class if pressed prop is set to true initially', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"], {
      pressed: true
    });

    var pressedClass = wrapper.instance().pressedClass;
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(1);
  });
  it('ignores the onClick callback', function () {
    var onClick = jest.fn();

    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"], {
      onClick: onClick
    });

    wrapper.find('button').simulate('click');
    expect(onClick).toHaveBeenCalledTimes(0);
  });
  it('toggles the pressed class if the pressed prop has changed', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"]);

    var pressedClass = wrapper.instance().pressedClass;
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(0);
    wrapper.setProps({
      pressed: true
    });
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(1); // Nothing should happen if the prop hasn't changed.

    wrapper.setProps({
      pressed: true
    });
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(1);
    wrapper.setProps({
      pressed: false
    });
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(0);
  });
  it('calls the given toggle callback method if the pressed prop has changed initially to true', function () {
    var onToggle = jest.fn();
    var props = {
      onToggle: onToggle
    };

    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"], props);

    wrapper.setProps({
      pressed: true
    });
    expect(onToggle).toHaveBeenCalledTimes(1); // If the prop has been changed, no click evt is available.

    expect(onToggle).toHaveBeenCalledWith(true, null);
    wrapper.setProps({
      pressed: false
    });
    expect(onToggle).toHaveBeenCalledTimes(2);
    expect(onToggle).toHaveBeenCalledWith(false, null); // Nothing should happen if the prop hasn't changed.

    wrapper.setProps({
      pressed: false
    });
    expect(onToggle).toHaveBeenCalledTimes(2);
    expect(onToggle).toHaveBeenCalledWith(false, null);
    wrapper.setProps({
      pressed: true
    });
    expect(onToggle).toHaveBeenCalledTimes(3);
    expect(onToggle).toHaveBeenCalledWith(true, null);
  });
  it('calls the given toggle callback method if the pressed prop has changed to false (from being false by default)', function () {
    var onToggle = jest.fn();
    var props = {
      onToggle: onToggle
    };

    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"], props); // Nothing should happen if the prop hasn't changed.
    // (pressed property is false by default)


    wrapper.setProps({
      pressed: false
    });
    expect(onToggle).toHaveBeenCalledTimes(0);
    wrapper.setProps({
      pressed: true
    });
    expect(onToggle).toHaveBeenCalledTimes(1); // If the prop has been changed, no click evt is available.

    expect(onToggle).toHaveBeenCalledWith(true, null); // Nothing should happen if the prop hasn't changed.

    wrapper.setProps({
      pressed: true
    });
    expect(onToggle).toHaveBeenCalledTimes(1);
    expect(onToggle).toHaveBeenCalledWith(true, null);
    wrapper.setProps({
      pressed: false
    });
    expect(onToggle).toHaveBeenCalledTimes(2);
    expect(onToggle).toHaveBeenCalledWith(false, null);
  });
  it('cleans the last click event if not available', function () {
    var onToggle = jest.fn();
    var props = {
      onToggle: onToggle
    };
    var clickEvtMock = expect.objectContaining({
      type: 'click'
    });

    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"], props);

    wrapper.setProps({
      pressed: true
    });
    expect(onToggle).toHaveBeenCalledTimes(1); // If the prop has been changed, no click evt is available.

    expect(onToggle).toHaveBeenCalledWith(true, null); // Pressed will now become false.

    wrapper.find('button').simulate('click');
    expect(onToggle).toHaveBeenCalledTimes(2);
    expect(onToggle).toHaveBeenCalledWith(false, clickEvtMock);
    wrapper.setProps({
      pressed: true
    }); // If the prop has been changed, no click evt is available.

    expect(onToggle).toHaveBeenCalledTimes(3);
    expect(onToggle).toHaveBeenCalledWith(true, null);
  });
  it('toggles the pressed class on click', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"]);

    var pressedClass = wrapper.instance().pressedClass;
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(0);
    wrapper.find('button').simulate('click');
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(1);
    wrapper.find('button').simulate('click');
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(0);
    wrapper.find('button').simulate('click');
    expect(wrapper.find("button.".concat(pressedClass)).length).toBe(1);
  });
  it('calls the given toggle callback method on click', function () {
    var onToggle = jest.fn();
    var props = {
      onToggle: onToggle
    };
    var clickEvtMock = expect.objectContaining({
      type: 'click'
    });

    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"], props);

    wrapper.find('button').simulate('click');
    expect(onToggle).toHaveBeenCalledTimes(1);
    expect(onToggle).toHaveBeenCalledWith(true, clickEvtMock);
    wrapper.find('button').simulate('click');
    expect(onToggle).toHaveBeenCalledTimes(2);
    expect(onToggle).toHaveBeenCalledWith(false, clickEvtMock);
    wrapper.find('button').simulate('click');
    expect(onToggle).toHaveBeenCalledTimes(3);
    expect(onToggle).toHaveBeenCalledWith(true, clickEvtMock);
  });
  it('toggles the pressed state of the component on click', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ToggleButton["default"]);

    wrapper.find('button').simulate('click');
    expect(wrapper.state('overallPressed')).toBe(true);
    wrapper.find('button').simulate('click');
    expect(wrapper.state('overallPressed')).toBe(false);
    wrapper.find('button').simulate('click');
    expect(wrapper.state('overallPressed')).toBe(true);
  });
});