"use strict";

var _TestUtil = _interopRequireDefault(require("../../Util/TestUtil"));

var _Map = _interopRequireDefault(require("ol/Map"));

var _ZoomButton = _interopRequireDefault(require("./ZoomButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('<ZoomButton />', function () {
  var map;
  beforeEach(function () {
    map = _TestUtil["default"].createMap();
  });
  it('is defined', function () {
    expect(_ZoomButton["default"]).not.toBeUndefined();
  });
  it('can be rendered', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ZoomButton["default"], {
      map: map
    });

    expect(wrapper).not.toBeUndefined();
  });
  it('zooms in when clicked', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ZoomButton["default"], {
      map: map
    });

    var initialZoom = map.getView().getZoom();
    wrapper.instance().onClick();
    var promise = new Promise(function (resolve) {
      setTimeout(resolve, 300);
    });
    expect.assertions(1);
    return promise.then(function () {
      var newZoom = map.getView().getZoom();
      expect(newZoom).toBe(initialZoom + 1);
    });
  });
  it('can be configured to zoom out', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ZoomButton["default"], {
      map: map,
      delta: -1
    });

    var initialZoom = map.getView().getZoom();
    wrapper.instance().onClick();
    var promise = new Promise(function (resolve) {
      setTimeout(resolve, 300);
    });
    expect.assertions(1);
    return promise.then(function () {
      var newZoom = map.getView().getZoom();
      expect(newZoom).toBe(initialZoom - 1);
    });
  });
  it('does not belch when map has no view', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ZoomButton["default"], {
      map: new _Map["default"]()
    });

    expect(function () {
      wrapper.instance().onClick();
    }).not.toThrow();
  });
  it('cancels already running animations', function () {
    var wrapper = _TestUtil["default"].mountComponent(_ZoomButton["default"], {
      map: map,
      duration: 250
    });

    var view = map.getView();
    view.cancelAnimations = jest.fn();
    wrapper.instance().onClick();
    wrapper.instance().onClick();
    wrapper.instance().onClick();
    expect(view.cancelAnimations.mock.calls.length).toBe(2);
  });
});