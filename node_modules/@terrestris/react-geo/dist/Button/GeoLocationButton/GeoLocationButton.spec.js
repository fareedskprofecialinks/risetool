"use strict";

var _TestUtil = _interopRequireDefault(require("../../Util/TestUtil"));

var _GeoLocationButton = _interopRequireDefault(require("./GeoLocationButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('<GeoLocationButton />', function () {
  var map;
  beforeEach(function () {
    map = _TestUtil["default"].createMap();
  });
  describe('#Basics', function () {
    it('is defined', function () {
      expect(_GeoLocationButton["default"]).not.toBeUndefined();
    });
    it('can be rendered', function () {
      var wrapper = _TestUtil["default"].mountComponent(_GeoLocationButton["default"], {
        map: map
      });

      expect(wrapper).not.toBeUndefined();
    });
    it('creates the geolocation interaction on the fly', function () {
      var wrapper = _TestUtil["default"].mountComponent(_GeoLocationButton["default"], {
        map: map,
        showMarker: false
      });

      var instance = wrapper.instance();
      expect(instance.geolocationInteraction).toBeUndefined();
    });
    it('can be pressed', function () {
      var wrapper = _TestUtil["default"].mountComponent(_GeoLocationButton["default"], {
        map: map,
        showMarker: false
      });

      var instance = wrapper.instance();
      instance.onToggle(true);
      expect(instance._geoLocationInteraction).not.toBeUndefined();
    });
    it('can be pressed twice', function () {
      var wrapper = _TestUtil["default"].mountComponent(_GeoLocationButton["default"], {
        map: map,
        showMarker: false
      });

      var instance = wrapper.instance();
      instance.onToggle(true);
      instance.onToggle(false);
      expect(instance._geoLocationInteraction).toBeNull();
    });
    it('can use the geolocation interaction', function () {
      var onChange = jest.fn();

      var wrapper = _TestUtil["default"].mountComponent(_GeoLocationButton["default"], {
        map: map,
        showMarker: false,
        onGeolocationChange: onChange
      });

      var instance = wrapper.instance();
      instance.onToggle(true);
      var getPosition = jest.fn();
      getPosition.mockReturnValue([2, 3]);
      instance._geoLocationInteraction.getPosition = getPosition;
      instance.onGeolocationChange();
      expect(onChange).toHaveBeenCalledTimes(1);
    });
  });
});