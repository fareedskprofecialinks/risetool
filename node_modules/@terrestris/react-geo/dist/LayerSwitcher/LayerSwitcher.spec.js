"use strict";

var _TestUtil = _interopRequireDefault(require("../Util/TestUtil"));

var _LayerSwitcher = _interopRequireDefault(require("./LayerSwitcher"));

var _Tile = _interopRequireDefault(require("ol/layer/Tile"));

var _Stamen = _interopRequireDefault(require("ol/source/Stamen"));

var _OSM = _interopRequireDefault(require("ol/source/OSM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
var fakeEvent = {
  stopPropagation: function stopPropagation() {
    return undefined;
  }
};
describe('<LayerSwitcher />', function () {
  var wrapper;
  var map;
  var layers;
  beforeEach(function () {
    layers = [new _Tile["default"]({
      name: 'OSM',
      source: new _OSM["default"]()
    }), new _Tile["default"]({
      name: 'Stamen',
      source: new _Stamen["default"]({
        layer: 'watercolor'
      })
    })];
    map = _TestUtil["default"].createMap();
    map.addLayer(layers[0]);
    map.addLayer(layers[1]);
    var props = {
      map: map,
      layers: layers
    };
    wrapper = _TestUtil["default"].mountComponent(_LayerSwitcher["default"], props);
  });
  afterEach(function () {
    _TestUtil["default"].removeMap(map);

    layers = null;
    map = null;
  });
  it('is defined', function () {
    expect(_LayerSwitcher["default"]).not.toBeUndefined();
  });
  it('can be rendered', function () {
    expect(wrapper).not.toBeUndefined();
  });
  it('contains map element', function () {
    var mapElement = wrapper.find('div#layer-switcher-map');
    expect(mapElement).not.toBeUndefined();
  });
  it('adds a custom className', function () {
    var props = {
      className: 'peter',
      map: map,
      layers: layers
    };
    wrapper = _TestUtil["default"].mountComponent(_LayerSwitcher["default"], props);
    var elementClass = wrapper.find('div').get(0).props.className;
    expect(elementClass).toContain('peter');
    expect(elementClass).toContain(wrapper.instance()._className);
  });
  it('passes style prop', function () {
    var props = {
      style: {
        backgroundColor: 'yellow',
        position: 'inherit'
      },
      map: map,
      layers: layers
    };
    wrapper = _TestUtil["default"].mountComponent(_LayerSwitcher["default"], props);
    expect(wrapper.props().style.backgroundColor).toBe('yellow');
    expect(wrapper.props().style.position).toBe('inherit');
  });
  it('sets all but one layer to invisible', function () {
    var layer0visibile = layers[0].getVisible();
    var layer1visibile = layers[1].getVisible();
    expect(layer0visibile && layer1visibile).toBe(false);
    expect(layer0visibile || layer1visibile).toBe(true);
  });
  it('switches the visible layer on click', function () {
    var instance = wrapper.instance();
    var layer0visibile = layers[0].getVisible();
    var layer1visibile = layers[1].getVisible();
    instance.onSwitcherClick(fakeEvent);
    expect(layers[0].getVisible()).toBe(!layer0visibile);
    expect(layers[1].getVisible()).toBe(!layer1visibile);
  });
});