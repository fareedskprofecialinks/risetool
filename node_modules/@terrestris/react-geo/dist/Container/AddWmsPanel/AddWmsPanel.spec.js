"use strict";

var _Tile = _interopRequireDefault(require("ol/layer/Tile"));

var _TileWMS = _interopRequireDefault(require("ol/source/TileWMS"));

var _AddWmsPanel = _interopRequireDefault(require("./AddWmsPanel"));

var _SimpleButton = _interopRequireDefault(require("../../Button/SimpleButton/SimpleButton"));

var _TestUtil = _interopRequireDefault(require("../../Util/TestUtil"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('<AddWmsPanel />', function () {
  var testLayerName = 'OSM-WMS';
  var testLayerTitle = 'OSM-WMS - by terrestris';
  var testLayer = new _Tile["default"]({
    visible: false,
    title: testLayerTitle,
    source: new _TileWMS["default"]({
      url: 'https://ows.terrestris.de/osm/service?',
      params: {
        'LAYERS': testLayerName,
        'TILED': true
      }
    })
  });
  var testLayerName2 = 'OSM-WMS 2';
  var testLayerTitle2 = 'OSM-WMS - by terrestris 2';
  var testLayer2 = new _Tile["default"]({
    visible: false,
    title: testLayerTitle2,
    source: new _TileWMS["default"]({
      url: 'https://ows.terrestris.de/osm/service?',
      params: {
        'LAYERS': testLayerName2,
        'TILED': true
      }
    })
  });
  var testWmsLayers = [testLayer, testLayer2];
  it('is defined', function () {
    expect(_AddWmsPanel["default"]).not.toBeUndefined();
  });
  it('can be rendered', function () {
    var wrapper = _TestUtil["default"].mountComponent(_AddWmsPanel["default"], {
      wmsLayers: testWmsLayers
    });

    expect(wrapper).not.toBeUndefined();
  });
  it('updates state on onSelectedLayersChange', function () {
    var wrapper = _TestUtil["default"].mountComponent(_AddWmsPanel["default"], {
      wmsLayers: testWmsLayers
    });

    var titles = testWmsLayers.map(function (layer) {
      return layer.Title;
    });
    wrapper.instance().onSelectedLayersChange(titles);
    var state = wrapper.state();
    expect(state.selectedWmsLayers).toBe(titles);
  });
  it('passes all wmsLayers to onLayerAddToMap if onAddAllLayers is called', function () {
    var onLayerAddToMapMock = jest.fn();

    var wrapper = _TestUtil["default"].mountComponent(_AddWmsPanel["default"], {
      wmsLayers: testWmsLayers,
      onLayerAddToMap: onLayerAddToMapMock
    });

    wrapper.instance().onAddAllLayers();
    expect(onLayerAddToMapMock).toHaveBeenCalledTimes(1);
    expect(onLayerAddToMapMock).toHaveBeenCalledWith(testWmsLayers);
  });
  it('passes filtered set of wmsLayers to onLayerAddToMap if onAddSelectedLayers is called', function () {
    var selectedWmsLayers = [testLayerTitle2];
    var onLayerAddToMapMock = jest.fn();

    var wrapper = _TestUtil["default"].mountComponent(_AddWmsPanel["default"], {
      wmsLayers: testWmsLayers,
      onLayerAddToMap: onLayerAddToMapMock
    });

    wrapper.setState({
      selectedWmsLayers: selectedWmsLayers
    }, function () {
      wrapper.instance().onAddSelectedLayers();
      expect(onLayerAddToMapMock).toHaveBeenCalledTimes(1);
      var passedFunctionParameter = onLayerAddToMapMock.mock.calls[0][0];
      expect(passedFunctionParameter.length).toBe(selectedWmsLayers.length);
    });
  });
  it('renders cancelBtn only if onCancel prop (as function) is provided', function () {
    var wrapper = _TestUtil["default"].mountComponent(_AddWmsPanel["default"], {
      wmsLayers: testWmsLayers
    });

    var buttonsWithoutCancel = wrapper.find(_SimpleButton["default"]);
    expect(buttonsWithoutCancel).toHaveLength(2);
    buttonsWithoutCancel.forEach(function (btn) {
      expect(btn.key).not.toBe('cancelBtn');
    });
    wrapper.unmount();
    wrapper = _TestUtil["default"].mountComponent(_AddWmsPanel["default"], {
      onCancel: jest.fn,
      wmsLayers: testWmsLayers
    });
    var buttonsWithCancel = wrapper.find(_SimpleButton["default"]);
    expect(buttonsWithCancel).toHaveLength(3);
    var buttonWithCancel = buttonsWithCancel.get(2);
    expect(buttonWithCancel.key).toBe('cancelBtn');
  });
});