"use strict";

var _TestUtil = _interopRequireDefault(require("../../Util/TestUtil"));

var _CoordinateReferenceSystemCombo = _interopRequireDefault(require("../CoordinateReferenceSystemCombo/CoordinateReferenceSystemCombo"));

var _Logger = _interopRequireDefault(require("@terrestris/base-util/dist/Logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('<CoordinateReferenceSystemCombo />', function () {
  var resultMock = {
    status: 'ok',
    number_result: 1,
    results: [{
      code: '31466',
      bbox: [53.81, 5.86, 49.11, 7.5],
      proj4: '+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs',
      name: 'DHDN / 3-degree Gauss-Kruger zone 2'
    }, {
      code: '4326',
      bbox: [90, -180, -90, 180],
      proj4: '+proj=longlat +datum=WGS84 +no_defs',
      name: 'WGS 84'
    }]
  };
  it('is defined', function () {
    expect(_CoordinateReferenceSystemCombo["default"]).not.toBeUndefined();
  });
  it('can be rendered', function () {
    var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"]);

    expect(wrapper).not.toBeUndefined();
  });
  describe('#fetchCrs', function () {
    it('sends a request with searchTerm', function () {
      var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"]);

      var searchVal = '25832';
      var callback = jest.fn();
      var fetchPromise = wrapper.instance().fetchCrs(searchVal, callback);
      expect(fetchPromise).toBeInstanceOf(Promise);
    });
  });
  describe('#transformResults', function () {
    var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"]);

    it('appropriately transforms filled results', function () {
      var transformedResults = wrapper.instance().transformResults(resultMock);
      expect(transformedResults).toHaveLength(resultMock.results.length);
      transformedResults.forEach(function (crsObj, idx) {
        expect(crsObj.code).toBe(resultMock.results[idx].code);
        expect(crsObj.bbox).toBe(resultMock.results[idx].bbox);
        expect(crsObj.proj4def).toBe(resultMock.results[idx].proj4);
        expect(crsObj.value).toBe(resultMock.results[idx].name);
      });
    });
    it('appropriately transforms empty results', function () {
      var transformedResults = wrapper.instance().transformResults({
        success: 'ok',
        results: []
      });
      expect(transformedResults).toHaveLength(0);
    });
  });
  describe('#onFetchError', function () {
    it('logs error message', function () {
      var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"]);

      var loggerSpy = jest.spyOn(_Logger["default"], 'error');
      wrapper.instance().onFetchError('Peter');
      expect(loggerSpy).toHaveBeenCalled();
      expect(loggerSpy).toHaveBeenCalledWith('Error while requesting in CoordinateReferenceSystemCombo: Peter');
      loggerSpy.mockRestore();
    });
  });
  describe('#handleSearch', function () {
    var value = 25832;

    var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"]);

    it('resets state if value is empty', function () {
      wrapper.setState({
        value: value,
        crsDefinitions: resultMock.results
      }, function () {
        wrapper.instance().handleSearch(null);
        window.setTimeout(function () {
          var stateAfter = wrapper.state();
          expect(stateAfter.value).toBe(null);
          expect(stateAfter.crsDefinitions).toHaveLength(0);
        }, 50);
      });
    });
    it('updates state if value is given', function () {
      wrapper.setState({
        value: value,
        crsDefinitions: resultMock.results
      }, function () {
        wrapper.instance().handleSearch(value);
        window.setTimeout(function () {
          var stateAfter = wrapper.state();
          expect(stateAfter.value).toBe(value);
        }, 50);
      });
    });
  });
  describe('#onCrsItemSelect', function () {
    it('sets value property in state for given code', function () {
      var onSelect = jest.fn();
      var props = {
        onSelect: onSelect
      };

      var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"], props);

      wrapper.setState({
        crsDefinitions: resultMock.results
      }, function () {
        wrapper.instance().onCrsItemSelect('31466');
        var stateAfter = wrapper.state();
        expect(stateAfter.crsDefinitions[0]).toBe(resultMock.results[0]);
      });
    });
    it('calls onSelect function if given in props', function () {
      var onSelect = jest.fn();
      var props = {
        onSelect: onSelect
      };

      var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"], props);

      wrapper.setState({
        crsDefinitions: resultMock.results
      }, function () {
        wrapper.instance().onCrsItemSelect('31466');
        expect(onSelect).toHaveBeenCalledTimes(1);
      });
    });
  });
  describe('#transformCrsObjectsToOptions', function () {
    it('returns an AutoComplete.Option', function () {
      var wrapper = _TestUtil["default"].mountComponent(_CoordinateReferenceSystemCombo["default"]);

      var item = {
        code: '31466',
        value: 'DHDN / 3-degree Gauss-Kruger zone 2'
      };
      var option = wrapper.instance().transformCrsObjectsToOptions(item);
      expect(option.key).toBe(item.code);
      expect(option.props.children).toBe("".concat(item.value, " (EPSG:").concat(item.code, ")"));
    });
  });
});