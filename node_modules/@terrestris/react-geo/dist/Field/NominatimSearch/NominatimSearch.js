"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.NominatimSearch = void 0;

require("antd/es/auto-complete/style");

var _autoComplete = _interopRequireDefault(require("antd/es/auto-complete"));

var React = _interopRequireWildcard(require("react"));

var _Logger = _interopRequireDefault(require("@terrestris/base-util/dist/Logger"));

var _UrlUtil = _interopRequireDefault(require("@terrestris/base-util/dist/UrlUtil/UrlUtil"));

var _proj = require("ol/proj");

var _constants = require("../../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Option = _autoComplete["default"].Option;

/**
 * The NominatimSearch.
 *
 * @class NominatimSearch
 * @extends React.Component
 */
var NominatimSearch =
/*#__PURE__*/
function (_React$Component) {
  _inherits(NominatimSearch, _React$Component);

  /**
   * The className added to this component.
   * @private
   */

  /**
   * Create the NominatimSearch.
   *
   * @param props The initial props.
   * @constructs NominatimSearch
   */
  function NominatimSearch(props) {
    var _this;

    _classCallCheck(this, NominatimSearch);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NominatimSearch).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "className", "".concat(_constants.CSS_PREFIX, "nominatimsearch"));

    _this.state = {
      searchTerm: '',
      dataSource: []
    };
    _this.onUpdateInput = _this.onUpdateInput.bind(_assertThisInitialized(_this));
    _this.onMenuItemSelected = _this.onMenuItemSelected.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * Called if the input of the AutoComplete is being updated. It sets the
   * current inputValue as searchTerm and starts a search if the inputValue has
   * a length of at least `this.props.minChars` (default 3).
   *
   * @param inputValue The inputValue. Undefined if clear btn
   *                                      is pressed.
   */


  _createClass(NominatimSearch, [{
    key: "onUpdateInput",
    value: function onUpdateInput(inputValue) {
      var _this2 = this;

      var onClear = this.props.onClear;
      this.setState({
        dataSource: []
      });
      this.setState({
        searchTerm: inputValue || ''
      }, function () {
        if (_this2.state.searchTerm.length >= _this2.props.minChars) {
          _this2.doSearch();
        }
      });

      if (!inputValue && onClear) {
        onClear();
      }
    }
    /**
     * Perform the search.
     */

  }, {
    key: "doSearch",
    value: function doSearch() {
      var baseParams = {
        format: this.props.format,
        viewbox: this.props.viewbox,
        bounded: this.props.bounded,
        polygon_geojson: this.props.polygon_geojson,
        addressdetails: this.props.addressdetails,
        limit: this.props.limit,
        countrycodes: this.props.countrycodes,
        q: this.state.searchTerm
      };

      var getRequestParams = _UrlUtil["default"].objectToRequestString(baseParams);

      fetch("".concat(this.props.nominatimBaseUrl).concat(getRequestParams)).then(function (response) {
        return response.json();
      }).then(this.onFetchSuccess.bind(this))["catch"](this.onFetchError.bind(this));
    }
    /**
     * This function gets called on success of the nominatim fetch.
     * It sets the response as dataSource.
     *
     * @param response The found features.
     */

  }, {
    key: "onFetchSuccess",
    value: function onFetchSuccess(response) {
      this.setState({
        dataSource: response
      });
    }
    /**
     * This function gets called when the nomintim fetch returns an error.
     * It logs the error to the console.
     *
     * @param error The errorstring.
     */

  }, {
    key: "onFetchError",
    value: function onFetchError(error) {
      _Logger["default"].error("Error while requesting Nominatim: ".concat(error));
    }
    /**
     * The function describes what to do when an item is selected.
     *
     * @param key The key of the selected option.
     */

  }, {
    key: "onMenuItemSelected",
    value: function onMenuItemSelected(key) {
      var selected = this.state.dataSource.find(function (i) {
        return i.place_id.toString() === key.toString();
      });
      this.props.onSelect(selected, this.props.map);
    }
    /**
     * The render function.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          nominatimBaseUrl = _this$props.nominatimBaseUrl,
          format = _this$props.format,
          viewbox = _this$props.viewbox,
          bounded = _this$props.bounded,
          polygon_geojson = _this$props.polygon_geojson,
          addressdetails = _this$props.addressdetails,
          limit = _this$props.limit,
          countrycodes = _this$props.countrycodes,
          map = _this$props.map,
          onSelect = _this$props.onSelect,
          renderOption = _this$props.renderOption,
          passThroughProps = _objectWithoutProperties(_this$props, ["className", "nominatimBaseUrl", "format", "viewbox", "bounded", "polygon_geojson", "addressdetails", "limit", "countrycodes", "map", "onSelect", "renderOption"]);

      var finalClassName = className ? "".concat(className, " ").concat(this.className) : this.className;
      return React.createElement(_autoComplete["default"], _extends({
        className: finalClassName,
        allowClear: true,
        placeholder: "Ortsname, Stra\xDFenname, Stadtteilname, POI usw.",
        dataSource: this.state.dataSource.map(renderOption.bind(this)),
        onChange: this.onUpdateInput,
        onSelect: this.onMenuItemSelected
      }, passThroughProps));
    }
  }]);

  return NominatimSearch;
}(React.Component);

exports.NominatimSearch = NominatimSearch;

_defineProperty(NominatimSearch, "defaultProps", {
  nominatimBaseUrl: 'https://nominatim.openstreetmap.org/search?',
  format: 'json',
  viewbox: '-180,90,180,-90',
  bounded: 1,
  polygon_geojson: 1,
  addressdetails: 1,
  limit: 10,
  countrycodes: 'de',
  minChars: 3,

  /**
   * Create an AutoComplete.Option from the given data.
   *
   * @param item The tuple as an object.
   * @return The returned option
   */
  renderOption: function renderOption(item) {
    return React.createElement(Option, {
      key: item.place_id
    }, item.display_name);
  },

  /**
   * The default onSelect method if no onSelect prop is given. It zooms to the
   * selected item.
   *
   * @param selected The selected item as it is returned by nominatim.
   */
  onSelect: function onSelect(selected, olMap) {
    if (selected && selected.boundingbox) {
      var olView = olMap.getView();
      var extent = [selected.boundingbox[2], selected.boundingbox[0], selected.boundingbox[3], selected.boundingbox[1]];
      extent = extent.map(function (coord) {
        return parseFloat(coord);
      });
      extent = (0, _proj.transformExtent)(extent, 'EPSG:4326', olView.getProjection().getCode());
      olView.fit(extent, {
        duration: 500
      });
    }
  },
  style: {
    width: 200
  }
});

var _default = NominatimSearch;
exports["default"] = _default;