"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeLayerAware = timeLayerAware;
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _isArray = require('lodash/isArray');
/**
 * Finds the key time in the passed object regardless of upper- or lowercase
 * characters. Will return `TIME` (all uppercase) as a fallback.
 *
 * @param params The object to find the key in, basically the params of
 *   a WMS source that will end up as URL parameters.
 * @return The key for the time parameter, in the actual spelling.
 */


var findTimeParam = function findTimeParam(params) {
  var keys = Object.keys(params);
  var foundKey = 'TIME'; // fallback

  keys.some(function (key) {
    var lcKey = key && key.toLowerCase && key.toLowerCase();

    if (lcKey === 'time') {
      foundKey = key;
      return true;
    }

    return false;
  });
  return foundKey;
};
/**
 * HOC that updates layers based on the wrapped components time instant or
 * interval. Can for example be used with the TimeSlider component.
 * @param WrappedComponent A component with an onChange prop.
 * @param layers An array of layer configurations.
 * @return A time layer aware component.
 */


function timeLayerAware(WrappedComponent, layers) {
  var _temp;

  return _temp =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(TimeLayerAware, _React$Component);

    function TimeLayerAware() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, TimeLayerAware);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimeLayerAware)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_this), "timeChanged", function (newValues) {
        layers.forEach(function (config) {
          if (config.isWmsTime) {
            var parms = config.layer.getSource().getParams();
            var timeParam = findTimeParam(parms);

            if (_isArray(newValues)) {
              parms[timeParam] = "".concat(newValues[0], "/").concat(newValues[1]);
            } else {
              parms[timeParam] = "".concat(newValues);
            }

            config.layer.getSource().updateParams(parms);
          }

          if (config.customHandler) {
            config.customHandler(newValues);
          }
        });
      });

      _defineProperty(_assertThisInitialized(_this), "render", function () {
        return React.createElement(WrappedComponent, _extends({
          onChange: _this.timeChanged
        }, _this.props));
      });

      return _this;
    }

    return TimeLayerAware;
  }(React.Component), _temp;
}

var _default = timeLayerAware;
exports["default"] = _default;