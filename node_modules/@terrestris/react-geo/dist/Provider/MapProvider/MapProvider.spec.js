"use strict";

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _enzyme = require("enzyme");

var _TestUtil = require("../../Util/TestUtil");

var _MapProvider = _interopRequireDefault(require("./MapProvider"));

var _MappifiedComponent = require("../../HigherOrderComponent/MappifiedComponent/MappifiedComponent");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('MapProvider', function () {
  /* eslint-disable require-jsdoc */
  var MockComponent =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(MockComponent, _React$Component);

    function MockComponent() {
      _classCallCheck(this, MockComponent);

      return _possibleConstructorReturn(this, _getPrototypeOf(MockComponent).apply(this, arguments));
    }

    _createClass(MockComponent, [{
      key: "render",
      value: function render() {
        return React.createElement("div", null, "Mockety-mock");
      }
    }]);

    return MockComponent;
  }(React.Component);
  /* eslint-enable require-jsdoc */


  _defineProperty(MockComponent, "propTypes", {
    map: PropTypes.object.isRequired
  });

  var MappifiedMockComponent = (0, _MappifiedComponent.mappify)(MockComponent);
  describe('Basics', function () {
    it('is defined', function () {
      expect(_MapProvider["default"]).not.toBeUndefined();
    });
    it('provides a given map to its children (ol.Map)', function () {
      var map = _TestUtil.TestUtil.createMap(); // We create the promise only to be able to return it below, we do not
      // actually use it to instantiate MapProvider


      var mapPromise = new Promise(function (resolve) {
        resolve(map);
      });
      var wrapper = (0, _enzyme.mount)(React.createElement(_MapProvider["default"], {
        map: map
      }, " ", React.createElement(MappifiedMockComponent, null))); // resolve our promise, so this async behaviour is testable.

      setTimeout(function () {
        mapPromise.resolve(map);
      }, 50);
      expect.assertions(2);
      return mapPromise.then(function () {
        var isReady = wrapper.state('ready');
        expect(isReady).toBe(true);
        wrapper.update();
        var mapFromMock = wrapper.find(MockComponent).prop('map');
        expect(mapFromMock).toBe(map);
      });
    });
    it('provides a given map to its children (Promise)', function () {
      var map = _TestUtil.TestUtil.createMap();

      var mapPromise = new Promise(function (resolve) {
        resolve(map);
      });
      var wrapper = (0, _enzyme.mount)(React.createElement(_MapProvider["default"], {
        map: mapPromise
      }, " ", React.createElement(MappifiedMockComponent, null)));
      expect.assertions(2);
      return mapPromise.then(function () {
        var isReady = wrapper.state('ready');
        expect(isReady).toBe(true);
        wrapper.update();
        var mapFromMock = wrapper.find(MockComponent).prop('map');
        expect(mapFromMock).toBe(map);
      });
    });
    it('Does not render on rejected promise', function () {
      var errMsg = 'Some message: Humpty';
      var failingPromise = new Promise(function (resolve, reject) {
        reject(new Error(errMsg));
      });
      var wrapper = (0, _enzyme.mount)(React.createElement(_MapProvider["default"], {
        map: failingPromise
      }, " ", React.createElement(MappifiedMockComponent, null)));
      expect.assertions(3);
      return failingPromise["catch"](function (err) {
        expect(err).toBeInstanceOf(Error);
        expect(err.message).toBe(errMsg);
        wrapper.update();
        var mapFromMock = wrapper.find(MockComponent);
        expect(mapFromMock.exists()).toBe(false);
      });
    });
  });
});