"use strict";

var _TestUtil = _interopRequireDefault(require("../../Util/TestUtil"));

var _MultiLayerSlider = _interopRequireDefault(require("./MultiLayerSlider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*eslint-env jest*/
describe('<MultiLayerSlider />', function () {
  var layers;
  beforeEach(function () {
    layers = [_TestUtil["default"].createVectorLayer(), _TestUtil["default"].createVectorLayer(), _TestUtil["default"].createVectorLayer()];
  });
  it('is defined', function () {
    expect(_MultiLayerSlider["default"]).not.toBeUndefined();
  });
  it('can be rendered', function () {
    var props = {
      layers: layers
    };

    var wrapper = _TestUtil["default"].mountComponent(_MultiLayerSlider["default"], props);

    expect(wrapper).not.toBeUndefined();
  });
  it('sets the initial transparency of the layers', function () {
    var props = {
      layers: layers
    };

    _TestUtil["default"].mountComponent(_MultiLayerSlider["default"], props);

    expect(layers[0].getOpacity()).toBe(1);
    expect(layers[1].getOpacity()).toBe(0);
    expect(layers[2].getOpacity()).toBe(0);
  });
  it('updates the opacity of the layer by setting a transparency value', function () {
    var props = {
      layers: layers
    };

    var wrapper = _TestUtil["default"].mountComponent(_MultiLayerSlider["default"], props);

    wrapper.instance().valueUpdated(25);
    expect(layers[0].getOpacity()).toBe(0.5);
    expect(layers[1].getOpacity()).toBe(0.5);
    expect(layers[2].getOpacity()).toBe(0);
    wrapper.instance().valueUpdated(50);
    expect(layers[0].getOpacity()).toBe(0);
    expect(layers[1].getOpacity()).toBe(1);
    expect(layers[2].getOpacity()).toBe(0);
    wrapper.instance().valueUpdated(75);
    expect(layers[0].getOpacity()).toBe(0);
    expect(layers[1].getOpacity()).toBe(0.5);
    expect(layers[2].getOpacity()).toBe(0.5);
    wrapper.instance().valueUpdated(100);
    expect(layers[0].getOpacity()).toBe(0);
    expect(layers[1].getOpacity()).toBe(0);
    expect(layers[2].getOpacity()).toBe(1);
    wrapper.instance().valueUpdated(0);
    expect(layers[0].getOpacity()).toBe(1);
    expect(layers[1].getOpacity()).toBe(0);
    expect(layers[2].getOpacity()).toBe(0);
  });
});